{
  "uid" : "34b9794cca7b09e0",
  "name" : "针对商品数量的测试",
  "fullName" : "sc.goods.test_addgoods.Test_addgoods#test_goodprice",
  "historyId" : "f09398986f26b06cab9825117fd9f113",
  "time" : {
    "start" : 1646977598316,
    "stop" : 1646977602338,
    "duration" : 4022
  },
  "description" : "\n        针对价格输入进行测试\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    针对价格输入进行测试\n    :return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (494, 519). Other element would receive the click: <span>...</span>\n  (Session info: chrome=97.0.4692.71)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x0069FDC3+2555331]\n\tOrdinal0 [0x006377F1+2127857]\n\tOrdinal0 [0x00532E08+1060360]\n\tOrdinal0 [0x005648CF+1263823]\n\tOrdinal0 [0x00562B10+1256208]\n\tOrdinal0 [0x0056076B+1247083]\n\tOrdinal0 [0x0055F559+1242457]\n\tOrdinal0 [0x00554FB3+1200051]\n\tOrdinal0 [0x00577B0C+1342220]\n\tOrdinal0 [0x00554984+1198468]\n\tOrdinal0 [0x00577C14+1342484]\n\tOrdinal0 [0x005875FA+1406458]\n\tOrdinal0 [0x00577976+1341814]\n\tOrdinal0 [0x005536B6+1193654]\n\tOrdinal0 [0x00554546+1197382]\n\tGetHandleVerifier [0x00839622+1619522]\n\tGetHandleVerifier [0x008E882C+2336844]\n\tGetHandleVerifier [0x007323E1+541697]\n\tGetHandleVerifier [0x00731443+537699]\n\tOrdinal0 [0x0063D18E+2150798]\n\tOrdinal0 [0x00641518+2168088]\n\tOrdinal0 [0x00641660+2168416]\n\tOrdinal0 [0x0064B330+2208560]\n\tBaseThreadInitThunk [0x75D5FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x76F47A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x76F47A4E+238]",
  "statusTrace" : "self = <Suites.sc.goods.test_addgoods.Test_addgoods object at 0x00000273E6325580>\nnum = 'asd'\n\n    @allure.epic('后台商城系统')\n    @allure.feature('商品模块')\n    @allure.story(\"新增商品功能\")\n    @allure.title('针对商品数量的测试')\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize('num', ['asd', '_+/*', '', '-1', '0'])\n    def test_goodprice(self, num):\n        '''\n        针对价格输入进行测试\n        :return:\n        '''\n        with allure.step('点击新增商品按钮'):\n            self.click('//*[@id=\"app\"]/div/div[2]/section/div/div/div[3]/div[1]/button[1]')\n        with allure.step('填入基本信息'):\n            # 填写商品名称\n            time.sleep(1)\n            self.click('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[1]/div/div[1]/div[1]/input')\n            self.input('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[1]/div/div[1]/div[1]/input', '商品价格输入')\n            # 上传商品图片\n            path = self.getlocation()\n            path1 = os.path.join(path, 'ocr.png')\n            self.input('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[2]/div/div/div[1]/div/input', path1)\n            # 选择分类\n            time.sleep(1)\n            self.click('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[3]/div/div/div/input')\n>           self.click('/html/body/div[3]/div[1]/div[1]/ul/li[2]/span')\n\nsc\\goods\\test_addgoods.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\txhoutai\\webkeys1.py:48: in click\n    self.driver.find_element(By.XPATH, locator).click()\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000273E7766700>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F47A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F47A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (494, 519). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=97.0.4692.71)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x0069FDC3+2555331]\nE       \tOrdinal0 [0x006377F1+2127857]\nE       \tOrdinal0 [0x00532E08+1060360]\nE       \tOrdinal0 [0x005648CF+1263823]\nE       \tOrdinal0 [0x00562B10+1256208]\nE       \tOrdinal0 [0x0056076B+1247083]\nE       \tOrdinal0 [0x0055F559+1242457]\nE       \tOrdinal0 [0x00554FB3+1200051]\nE       \tOrdinal0 [0x00577B0C+1342220]\nE       \tOrdinal0 [0x00554984+1198468]\nE       \tOrdinal0 [0x00577C14+1342484]\nE       \tOrdinal0 [0x005875FA+1406458]\nE       \tOrdinal0 [0x00577976+1341814]\nE       \tOrdinal0 [0x005536B6+1193654]\nE       \tOrdinal0 [0x00554546+1197382]\nE       \tGetHandleVerifier [0x00839622+1619522]\nE       \tGetHandleVerifier [0x008E882C+2336844]\nE       \tGetHandleVerifier [0x007323E1+541697]\nE       \tGetHandleVerifier [0x00731443+537699]\nE       \tOrdinal0 [0x0063D18E+2150798]\nE       \tOrdinal0 [0x00641518+2168088]\nE       \tOrdinal0 [0x00641660+2168416]\nE       \tOrdinal0 [0x0064B330+2208560]\nE       \tBaseThreadInitThunk [0x75D5FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F47A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F47A4E+238]\n\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_xunit_setup_method_fixture_Test_addgoods",
    "time" : {
      "start" : 1646977587856,
      "stop" : 1646977598315,
      "duration" : 10459
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        针对价格输入进行测试\n        :return:\n        ",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (494, 519). Other element would receive the click: <span>...</span>\n  (Session info: chrome=97.0.4692.71)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x0069FDC3+2555331]\n\tOrdinal0 [0x006377F1+2127857]\n\tOrdinal0 [0x00532E08+1060360]\n\tOrdinal0 [0x005648CF+1263823]\n\tOrdinal0 [0x00562B10+1256208]\n\tOrdinal0 [0x0056076B+1247083]\n\tOrdinal0 [0x0055F559+1242457]\n\tOrdinal0 [0x00554FB3+1200051]\n\tOrdinal0 [0x00577B0C+1342220]\n\tOrdinal0 [0x00554984+1198468]\n\tOrdinal0 [0x00577C14+1342484]\n\tOrdinal0 [0x005875FA+1406458]\n\tOrdinal0 [0x00577976+1341814]\n\tOrdinal0 [0x005536B6+1193654]\n\tOrdinal0 [0x00554546+1197382]\n\tGetHandleVerifier [0x00839622+1619522]\n\tGetHandleVerifier [0x008E882C+2336844]\n\tGetHandleVerifier [0x007323E1+541697]\n\tGetHandleVerifier [0x00731443+537699]\n\tOrdinal0 [0x0063D18E+2150798]\n\tOrdinal0 [0x00641518+2168088]\n\tOrdinal0 [0x00641660+2168416]\n\tOrdinal0 [0x0064B330+2208560]\n\tBaseThreadInitThunk [0x75D5FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x76F47A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x76F47A4E+238]",
    "statusTrace" : "self = <Suites.sc.goods.test_addgoods.Test_addgoods object at 0x00000273E6325580>\nnum = 'asd'\n\n    @allure.epic('后台商城系统')\n    @allure.feature('商品模块')\n    @allure.story(\"新增商品功能\")\n    @allure.title('针对商品数量的测试')\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.parametrize('num', ['asd', '_+/*', '', '-1', '0'])\n    def test_goodprice(self, num):\n        '''\n        针对价格输入进行测试\n        :return:\n        '''\n        with allure.step('点击新增商品按钮'):\n            self.click('//*[@id=\"app\"]/div/div[2]/section/div/div/div[3]/div[1]/button[1]')\n        with allure.step('填入基本信息'):\n            # 填写商品名称\n            time.sleep(1)\n            self.click('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[1]/div/div[1]/div[1]/input')\n            self.input('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[1]/div/div[1]/div[1]/input', '商品价格输入')\n            # 上传商品图片\n            path = self.getlocation()\n            path1 = os.path.join(path, 'ocr.png')\n            self.input('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[2]/div/div/div[1]/div/input', path1)\n            # 选择分类\n            time.sleep(1)\n            self.click('//*[@id=\"app\"]/div/div[2]/section/form/div[1]/div[2]/div[3]/div/div/div/input')\n>           self.click('/html/body/div[3]/div[1]/div[1]/ul/li[2]/span')\n\nsc\\goods\\test_addgoods.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\txhoutai\\webkeys1.py:48: in click\n    self.driver.find_element(By.XPATH, locator).click()\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000273E7766700>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F47A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76F47A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (494, 519). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=97.0.4692.71)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x0069FDC3+2555331]\nE       \tOrdinal0 [0x006377F1+2127857]\nE       \tOrdinal0 [0x00532E08+1060360]\nE       \tOrdinal0 [0x005648CF+1263823]\nE       \tOrdinal0 [0x00562B10+1256208]\nE       \tOrdinal0 [0x0056076B+1247083]\nE       \tOrdinal0 [0x0055F559+1242457]\nE       \tOrdinal0 [0x00554FB3+1200051]\nE       \tOrdinal0 [0x00577B0C+1342220]\nE       \tOrdinal0 [0x00554984+1198468]\nE       \tOrdinal0 [0x00577C14+1342484]\nE       \tOrdinal0 [0x005875FA+1406458]\nE       \tOrdinal0 [0x00577976+1341814]\nE       \tOrdinal0 [0x005536B6+1193654]\nE       \tOrdinal0 [0x00554546+1197382]\nE       \tGetHandleVerifier [0x00839622+1619522]\nE       \tGetHandleVerifier [0x008E882C+2336844]\nE       \tGetHandleVerifier [0x007323E1+541697]\nE       \tGetHandleVerifier [0x00731443+537699]\nE       \tOrdinal0 [0x0063D18E+2150798]\nE       \tOrdinal0 [0x00641518+2168088]\nE       \tOrdinal0 [0x00641660+2168416]\nE       \tOrdinal0 [0x0064B330+2208560]\nE       \tBaseThreadInitThunk [0x75D5FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F47A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F47A4E+238]\n\nC:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "点击新增商品按钮",
      "time" : {
        "start" : 1646977598316,
        "stop" : 1646977598757,
        "duration" : 441
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "填入基本信息",
      "time" : {
        "start" : 1646977598757,
        "stop" : 1646977602338,
        "duration" : 3581
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (494, 519). Other element would receive the click: <span>...</span>\n  (Session info: chrome=97.0.4692.71)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x0069FDC3+2555331]\n\tOrdinal0 [0x006377F1+2127857]\n\tOrdinal0 [0x00532E08+1060360]\n\tOrdinal0 [0x005648CF+1263823]\n\tOrdinal0 [0x00562B10+1256208]\n\tOrdinal0 [0x0056076B+1247083]\n\tOrdinal0 [0x0055F559+1242457]\n\tOrdinal0 [0x00554FB3+1200051]\n\tOrdinal0 [0x00577B0C+1342220]\n\tOrdinal0 [0x00554984+1198468]\n\tOrdinal0 [0x00577C14+1342484]\n\tOrdinal0 [0x005875FA+1406458]\n\tOrdinal0 [0x00577976+1341814]\n\tOrdinal0 [0x005536B6+1193654]\n\tOrdinal0 [0x00554546+1197382]\n\tGetHandleVerifier [0x00839622+1619522]\n\tGetHandleVerifier [0x008E882C+2336844]\n\tGetHandleVerifier [0x007323E1+541697]\n\tGetHandleVerifier [0x00731443+537699]\n\tOrdinal0 [0x0063D18E+2150798]\n\tOrdinal0 [0x00641518+2168088]\n\tOrdinal0 [0x00641660+2168416]\n\tOrdinal0 [0x0064B330+2208560]\n\tBaseThreadInitThunk [0x75D5FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x76F47A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x76F47A4E+238]\n\n",
      "statusTrace" : "  File \"F:\\room\\tx\\Suites\\sc\\goods\\test_addgoods.py\", line 321, in test_goodprice\n    self.click('/html/body/div[3]/div[1]/div[1]/ul/li[2]/span')\n  File \"F:\\room\\tx\\txhoutai\\webkeys1.py\", line 48, in click\n    self.driver.find_element(By.XPATH, locator).click()\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 81, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 710, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Program Files\\Python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_xunit_setup_method_fixture_Test_addgoods::0",
    "time" : {
      "start" : 1646977602373,
      "stop" : 1646977605463,
      "duration" : 3090
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "新增商品功能"
  }, {
    "name" : "epic",
    "value" : "后台商城系统"
  }, {
    "name" : "feature",
    "value" : "商品模块"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "parentSuite",
    "value" : "sc.goods"
  }, {
    "name" : "suite",
    "value" : "test_addgoods"
  }, {
    "name" : "subSuite",
    "value" : "Test_addgoods"
  }, {
    "name" : "host",
    "value" : "WIN-UJCKUL337GH"
  }, {
    "name" : "thread",
    "value" : "240-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "sc.goods.test_addgoods"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "num",
    "value" : "'asd'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "34b9794cca7b09e0.json",
  "parameterValues" : [ "'asd'" ]
}